<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Painel de Vendas</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            -webkit-text-size-adjust: 100%;
        }
        .metric-card {
            backdrop-filter: blur(10px);
            -webkit-backdrop-filter: blur(10px);
        }
        .loader {
            border: 4px solid #f3f3f3;
            border-top: 4px solid #3498db;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            animation: spin 1s linear infinite;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
    </style>
</head>
<body class="bg-black text-white flex flex-col items-center min-h-screen p-3">

    <div class="w-full max-w-xs mx-auto">
        <header id="header" class="text-center mb-4">
            <h1 class="text-xl font-bold text-gray-100">Painel de Vendas</h1>
        </header>

        <!-- Seção de Métricas -->
        <main id="metrics-section" class="hidden flex flex-col gap-4">
            <!-- Vendas de Hoje -->
            <div>
                <h2 class="text-base font-semibold text-gray-300 mb-2">Hoje</h2>
                <div class="flex flex-col gap-2">
                    <div class="metric-card bg-gray-800/50 border border-gray-700 p-2 rounded-lg text-center">
                        <h3 class="text-xs font-medium text-gray-400">Faturamento</h3>
                        <p id="revenueToday" class="text-2xl font-bold text-green-400">R$ 0,00</p>
                    </div>
                    <div class="grid grid-cols-2 gap-2">
                        <div class="metric-card bg-gray-800/50 border border-gray-700 p-2 rounded-lg text-center">
                            <h3 class="text-xs font-medium text-gray-400">Ticket Médio</h3>
                            <p id="ticketToday" class="text-lg font-semibold text-blue-400">R$ 0,00</p>
                        </div>
                        <div class="metric-card bg-gray-800/50 border border-gray-700 p-2 rounded-lg text-center">
                            <h3 class="text-xs font-medium text-gray-400">Pedidos</h3>
                            <p id="ordersToday" class="text-lg font-semibold text-purple-400">0</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Vendas de Ontem -->
            <div>
                <h2 class="text-base font-semibold text-gray-300 mb-2 mt-2">Ontem</h2>
                <div class="flex flex-col gap-2">
                     <div class="metric-card bg-gray-800/50 border border-gray-700 p-2 rounded-lg text-center">
                        <h3 class="text-xs font-medium text-gray-400">Faturamento</h3>
                        <p id="revenueYesterday" class="text-2xl font-bold text-green-400">R$ 0,00</p>
                    </div>
                     <div class="grid grid-cols-2 gap-2">
                        <div class="metric-card bg-gray-800/50 border border-gray-700 p-2 rounded-lg text-center">
                            <h3 class="text-xs font-medium text-gray-400">Ticket Médio</h3>
                            <p id="ticketYesterday" class="text-lg font-semibold text-blue-400">R$ 0,00</p>
                        </div>
                        <div class="metric-card bg-gray-800/50 border border-gray-700 p-2 rounded-lg text-center">
                            <h3 class="text-xs font-medium text-gray-400">Pedidos</h3>
                            <p id="ordersYesterday" class="text-lg font-semibold text-purple-400">0</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Vendas do Mês -->
            <div>
                <h2 class="text-base font-semibold text-gray-300 mb-2 mt-2">Mês Atual</h2>
                 <div class="flex flex-col gap-2">
                     <div class="metric-card bg-gray-800/50 border border-gray-700 p-2 rounded-lg text-center">
                        <h3 class="text-xs font-medium text-gray-400">Faturamento</h3>
                        <p id="revenueMonth" class="text-2xl font-bold text-green-400">R$ 0,00</p>
                    </div>
                     <div class="grid grid-cols-2 gap-2">
                        <div class="metric-card bg-gray-800/50 border border-gray-700 p-2 rounded-lg text-center">
                            <h3 class="text-xs font-medium text-gray-400">Ticket Médio</h3>
                            <p id="ticketMonth" class="text-lg font-semibold text-blue-400">R$ 0,00</p>
                        </div>
                        <div class="metric-card bg-gray-800/50 border border-gray-700 p-2 rounded-lg text-center">
                            <h3 class="text-xs font-medium text-gray-400">Pedidos</h3>
                            <p id="ordersMonth" class="text-lg font-semibold text-purple-400">0</p>
                        </div>
                    </div>
                </div>
            </div>
        </main>
        
        <div id="status-message" class="text-center mt-4 text-sm"></div>
        <div id="loader" class="mx-auto mt-8 loader"></div>
    </div>

    <script>
        const metricsSection = document.getElementById('metrics-section');
        const statusMessage = document.getElementById('status-message');
        const loader = document.getElementById('loader');

        // AGORA a função de busca chama a nossa própria API segura, e não mais a API diretamente.
        async function fetchOrdersForPeriod(startDate, endDate) {
            // Passamos as datas como parâmetros para a nossa função no servidor.
            const response = await fetch(`/api/get-sales?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`);
            
            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.error || `Erro ao buscar dados (status ${response.status})`);
            }
            
            return response.json();
        }

        // O resto do código permanece praticamente o mesmo...

        function calculateMetrics(orders) {
            const totalRevenue = orders.reduce((sum, order) => sum + parseFloat(order.total), 0);
            const orderCount = orders.length;
            const averageTicket = orderCount > 0 ? totalRevenue / orderCount : 0;
            return { totalRevenue, orderCount, averageTicket };
        }

        function displayMetrics(period, metrics) {
            document.getElementById(`revenue${period}`).textContent = formatCurrency(metrics.totalRevenue);
            document.getElementById(`ticket${period}`).textContent = formatCurrency(metrics.averageTicket);
            document.getElementById(`orders${period}`).textContent = metrics.orderCount;
        }

        function formatCurrency(value) {
            return value.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
        }
        
        async function loadAllData() {
            try {
                const now = new Date();
                const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 0, 0, 0);
                const todayEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59);

                const yesterday = new Date(now);
                yesterday.setDate(now.getDate() - 1);
                const yesterdayStart = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 0, 0, 0);
                const yesterdayEnd = new Date(yesterday.getFullYear(), yesterday.getMonth(), yesterday.getDate(), 23, 59, 59);

                const monthStart = new Date(now.getFullYear(), now.getMonth(), 1, 0, 0, 0);

                const [todayOrders, yesterdayOrders, monthOrders] = await Promise.all([
                    fetchOrdersForPeriod(todayStart, todayEnd),
                    fetchOrdersForPeriod(yesterdayStart, yesterdayEnd),
                    fetchOrdersForPeriod(monthStart, todayEnd)
                ]);

                displayMetrics('Today', calculateMetrics(todayOrders));
                displayMetrics('Yesterday', calculateMetrics(yesterdayOrders));
                displayMetrics('Month', calculateMetrics(monthOrders));

                loader.classList.add('hidden');
                metricsSection.classList.remove('hidden');

            } catch (error)
            {
                console.error('Erro:', error);
                loader.classList.add('hidden');
                statusMessage.innerHTML = `<p class="text-red-400">${error.message}</p>`;
            }
        }

        window.addEventListener('load', loadAllData);
    </script>
</body>
</html>
